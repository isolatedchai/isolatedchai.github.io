[{"title":"myBatis中的_parameter","date":"2017-06-20T10:38:18.000Z","path":"2017/06/20/2017_6_20/","text":"今日写的一块查询功能，遇到下面这样一个问题，以为什么地方没有定义好，全部检查了一遍结果并没有发现错误，问题出现在原本只是根据从第一张表获取到的id作为第二张表相关信息的pid来查询所有有关内容，后来加入了查询的几个参数后，再调试便出现上述的异常 相关代码po一下： jsp的modal jsp的js controller service mapper xml-1 xml-2 页面中 初一看个人感觉没错误，也是按照以前的写法风格，结果这里加上查询的几个参数后出现问题，百度了一下，矛头指向xml-1中的vpnUserPidSelectByPageCount 在使用mybaitis传参数的时候，如果仅传入一个类型为String的参数，那么在xml文件中应该使用_parameter来代替参数名。 试着修改了下代码，改后xml-1 结果页面中显示完好，并且相关查询正常 这里提出一个疑问，为什么以前写的相关查询并不需要将字段参数名改为_parameter，而再这里却需要？ 结合相关知识后，归纳为有一下几种 1.使用的简单数据类型,需要if test的情况，需使用,此处一定使用_parameter != null而不是原参数名 != null 2.使用的一个对象数据类型,如#{dotname,jdbcType=VARCHAR}中的dotname一定要使用user对象的属性名 3.使用的多个对象数据类型List select(String pid,Page page),此时if test一定要 where语句where pid = #{0.pid,jdbcType=CHAR} 4.使用的集合类型5.使用的对象类型中的集合属性","tags":[{"name":"mybatis","slug":"mybatis","permalink":"//tusick.me/tags/mybatis/"}]},{"title":"mybatis的分页查询","date":"2017-05-26T08:26:44.000Z","path":"2017/05/26/2017_5_26/","text":"","tags":[{"name":"杂记","slug":"杂记","permalink":"//tusick.me/tags/杂记/"}]},{"title":"CSS预处理器-Less的小白入门1","date":"2017-05-23T02:07:22.000Z","path":"2017/05/23/2017-5-23/","text":"最近了解到CSS预处理器的相关知识，觉得在一定程度上弥补了css某些方面的不足之处而对Less具有一定好感，遂来学习学习 什么是CSS预处理器CSS本身不是一种编程语言，可以用它开发网页样式，但是没法用它编程。CSS只是一行行单纯的属性描述，且代码难易组织和维护。如果在CSS中加入一些编程元素，让CSS能像其他程序语言一样可以做一些预定的处理，这样就有了CSS预处理器。CSS 预处理器用一种专门的编程语言，进行 Web 页面样式设计，然后再编译成正常的 CSS 文件，以供项目使用。CSS预处理器为CSS增加一些编程的特性，无需考虑浏览器的兼容性问题”，例如你可以在 CSS 中使用变量、简单的逻辑程序、函数（如右侧代码编辑器中就使用了变量$color）等等在编程语言中的一些基本特性，可以让你的 CSS 更加简洁、适应性更强、可读性更佳，更易于代码的维护等诸多好处。目前流行的三大CSS预处理器，Sass Less Stylus。 为什么要使用CSS预处理器1.CSS语法不支持递归定义的表达式，所以你没有办法用一个语句定义一个启发式的规则。如： .fs1{font-size:10px} .fs2{font-size:11px} /** .fs3 ... .fs9 **/ .fs20{font-size:29px} 如果数量更多到100+，修改费事费力，而通过CSS预处理器，极大提高便利性 @maxnumber:20; .makeSizeRules(@number) when(@number&lt;=@maxnumber){ .fs@{number}{ font-size:9+@number px; } .makeSizeRules(@number+1); } .makeSizeRules(1); 2.CSS的mixin式复用性支持不够。使用纯CSS，我们可以抽象出一些常用的布局CSS属性组合，通过CSS的类组合来达成常见的mixin式复用。3.预编译可缓解多浏览器兼容造成的冗余。通过CSS预处理器 当然，预编译不是万能的，在某些方面会变得额外麻烦。比如：CSS的好处在于简便、随时随地被使用和调试，而预编译CSS步骤的加入，让我们开发工作流中多了一个环节，调试也变得更麻烦了。更大的问题在于，预编译很容易造成后代选择器的滥用。 预编译语言模糊了样式覆写的问题，而导致要解决样式相互覆写的问题时，问题已经变得规模庞大而难以解决。 .first{ font-size:10px; a{ font-size:11px; } .b{ font-size:12px; } } .second{ font-size:13px; .b{ font-size:14px; } } 如果在这样一个文档结构.first.second &gt; .head &gt; a,需要使a的font-size设置为17px，除样式相互覆写或者额外再加一行外，并没有特别好的办法。 Less GO主要语法特性： 混入（Mixins）：其主要意思是将一个定义好的class A引入到另一个class B中，从而简单实现class B继承了class A的所有属性;参数混合（Parametric）：像函数一样在classA中定义一个参数的默认值，还可以是@arguments，然后将定义好的class A引入class B中；嵌套规则（Nested Rules）：在一个选择器中嵌套另一个选择器来实现继承。从而减少了代码量，并且增加了代码的可读性；运算（Operations）：在CSS中使用加、减、乘、除进行数学运算；颜色功能（Color function）：颜色的函数运算，可以编辑你的颜色；命名空间（Namespaces）：将一些变量或者混合模块打包封装，更好的组织CSS和属性集的重复使用；作用域（Scope）：局部修改样式；JavaScript表达式(Javascript evaluation)：在CSS样式中使用Javascript表达式赋值。 扩展名默认Less使用.less扩展名变量 Less 的变量名使用 @ 符号开始,然后变量名和值使用冒号隔开，跟 CSS 的属性一致 @maxnumber:20; 嵌套需要在CSS中相同的 parent 引用多个元素 section { margin: 10px; nav { height: 25px; a { color: #0982C1; &amp;amp;:hover { text-decoration: underline; } } } } 混入某段 CSS 经常需要在多个元素中使用时，你可以为这些共用的 CSS 定义一个 Mixin，然后你只需要在需要引用这些 CSS 地方调用该 Mixin 即可 .error(@borderWidth: 2px) { border: @borderWidth solid #F00; color: #F00; } .generic-error { padding: 20px; margin: 4px; .error(); /* Applies styles from mixin error */ } .login-error { left: 12px; position: absolute; top: 20px; .error(5px); /* Applies styles from mixin error with argument @borderWidth equal to 5px */ } 继承需要为多个元素定义相同样式时 .block { margin: 10px 5px; padding: 2px; } p { .block; border: 1px solid #EEE; } ul, ol { .block; color: #333; text-transform: uppercase; } 所生成的CSS为 .block { margin: 10px 5px; padding: 2px; } p { margin: 10px 5px; padding: 2px; border: 1px solid #EEE; } ul, ol { margin: 10px 5px; padding: 2px; color: #333; text-transform: uppercase; } 导入导入颜色：CSS 预处理器一般都会内置一些颜色处理函数用来对颜色值进行处理， lighten(@color, 10%); /* returns a color 10% lighter than @color */ darken(@color, 10%); /* returns a color 10% darker than @color */ saturate(@color, 10%); /* returns a color 10% more saturated than @color */ desaturate(@color, 10%); /* returns a color 10% less saturated than @color */ spin(@color, 10); /* returns a color with a 10 degree larger in hue than @color */ spin(@color, -10); /* returns a color with a 10 degree smaller hue than @color */ mix(@color1, @color2); /* return a mix of @color1 and @color2 */ | 【to be continued】 PS：好吧，其实作为小白的我，以上很大部分都是借鉴其他各种大牛的日志摘要归纳来的,权当学习学习：）","tags":[{"name":"前端","slug":"前端","permalink":"//tusick.me/tags/前端/"}]},{"title":"myFirstblog","date":"2017-05-20T09:42:43.000Z","path":"2017/05/20/my-first-blog/","text":"#前言 这是生菜的第一篇博文，这里交给杂记 什么都不会的生菜在于某一天看到了各种精彩的个人博客，瞬间被吸引住，然而因为某些原因（主要还是懒）而迟迟未行动终于下定决心后开始捣鼓git指令、github、hexo、购域名等，最终，在风和日丽的某节日里 借助某框架完成了初步的博客搭建，也便是现在所见到的决定作为个人技术博客la努力学习，壮大myblog 共勉 以后有能力了，再自己原生写个框架搭建成自己喜爱的样子做一个个人生活博客记录自己所想会有那么一天的 最后，献上可爱的Sans以及Papyrus","tags":[{"name":"杂记","slug":"杂记","permalink":"//tusick.me/tags/杂记/"}]}]