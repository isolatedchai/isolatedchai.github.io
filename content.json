[{"title":"ssm-导出报表","date":"2017-07-11T09:17:12.000Z","path":"2017/07/11/2017_7_11/","text":"实现导出报表的功能（不带时间范围把控，直接导出数据库表中相应字段的所有信息），直接上代码 关键代码jsp文件里面，页面方面内容： &lt;a onclick=&quot;exportexcel()&quot; id=&quot;exportExcel&quot; class=&quot;btn btn-success&quot; style=&quot;float: left;margin-left: 5px;&quot;&gt;导出报表&lt;/a&gt; jsp文件里面，JS方面内容： function exportexcel() { &lt;%--$(&quot;#exprotExcel&quot;).attr(&apos;href&apos;,&quot;${base}/internetBarProtect/ExportExcel?dates=&quot;+$(&quot;#tdate&quot;).val()+&quot;/&quot;+$(&quot;#tdatetwo&quot;).val()+&quot;&amp;AreaName=&quot;+$(&quot;#areaselect&quot;).val());--%&gt; $(&quot;#exportExcel&quot;).attr(&apos;href&apos;,&quot;${base}/internetBarProtect/ExportExcel&quot;); $(&quot;#exportExcel&quot;).click(); } controller.java 中 /** * 导出EXCEL * @param * @return * */ @RequestMapping(value=&quot;ExportExcel&quot;) public ModelAndView ExportExcel(){ ModelAndView view = new ModelAndView(); List&lt;List&lt;String&gt;&gt; list = new ArrayList&lt;&gt;(); HashMap&lt;String,Object&gt; hashMap = new HashMap&lt;&gt;(); NumberFormat nf = java.text.NumberFormat.getInstance(); nf.setGroupingUsed(false); Pages pages = new Pages(); pages.setNownum(0); pages.setBack(internetBarProtectService.userfindbyParamToPageCount(hashMap)); List&lt;InternetBarUser&gt; ints = internetBarProtectService.userfindbyParamToPage(hashMap,pages); for(InternetBarUser in:ints){ List&lt;String&gt; out = new ArrayList&lt;&gt;(); out.add(in.getCityarea()); out.add(in.getInternetBar()); out.add(in.getUsername()); out.add(in.getContacts()); out.add(in.getContactInformation()); list.add(out); } String title =&quot;网吧防护用户清单&quot;; String name =&quot;网吧防护用户清单&quot;; String[] heads = new String[]{&quot;县市&quot;,&quot;网吧/专线&quot;,&quot;用户名&quot;,&quot;联系人&quot;,&quot;联系方式&quot;}; view.setView(new ExcelViewGroupOne(title,name,heads,list)); return view; } service mapper xml 中的userfindbyParamToPageCount与userfindbyParamToPage不再叙述 导出页面： 导出后得到的报表：","tags":[{"name":"ssm","slug":"ssm","permalink":"//tusick.me/tags/ssm/"}]},{"title":"ssm-文件上传","date":"2017-07-10T06:26:12.000Z","path":"2017/07/10/2017_7_10/","text":"ssm框架中的文件上传功能，直接导入excel表插入信息 关键代码jsp文件里面，页面方面内容： &lt;form id=&quot;uploadexcle2&quot; action=&quot;${base}/internetBarProtect/uploadOriginExcel2&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;div id=&quot;userlevelshow2&quot; style=&quot;float:left;margin-left:5px&quot;&gt; &lt;a class=&quot;btn btn-success&quot; id=&quot;chooseFileBtn2&quot; onclick=&quot;chooseFileF2()&quot;&gt;选择文件&lt;/a&gt; &lt;input type=&quot;file&quot; name=&quot;upfile2&quot; onchange=&quot;insertValue2()&quot; id=&quot;chooseFile2&quot; multiple=&quot;multiple&quot; style=&quot;display: none;&quot;/&gt; &lt;a href=&quot;javascript:dosend2();&quot; class=&quot;btn btn-success&quot;&gt;导入报表&lt;/a&gt; &lt;/div&gt; &lt;/form&gt; #外层 作为加载框 &lt;div class=&quot;container&quot; id=&quot;loading2&quot; style=&quot;display:none; z-index: 999999999&quot;&gt; &lt;div id=&quot;row2&quot; style=&quot;position: absolute;top: 200px;left: 50%;margin-left: -50px;&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-success btn-lg ladda-button center-block&quot; id=&quot;showmore2&quot; data-style=&quot;contract-overlay&quot;&gt; &lt;span class=&quot;ladda-label&quot;&gt;&lt;/span&gt; &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; 页面端的初始界面 jsp文件里面，js方面内容： var maxnum2 = 1; var curFiles2 = []; //文件导入 function chooseFileF2(){ var ChooseFileBtnSun2 = $(&apos;#fileText2&apos;).find(&apos;p&apos;).length; if(ChooseFileBtnSun2 &lt; maxnum2){ $(&apos;#chooseFile2&apos;).click(); }else{ alert(&quot;只能选择一个！！！&quot;); } } //选择文件 显示 function insertValue2(){ var chooseFileA2 = document.getElementById(&quot;chooseFile2&quot;); var fileTextA2 = document.getElementById(&quot;fileText2&quot;); var files2 = chooseFileA2.files; //此files非彼files if(files2 &amp;&amp; files2.length){ Array.prototype.push.apply(curFiles2,files2); } if(files2.length &gt; maxnum2){ alert(&quot;只能选一个！！！&quot;) curFiles2=[]; }else{ for(var i=0;i&lt;chooseFileA2.files.length;i++){ fileTextA2.innerHTML +=&quot;&lt;p&gt;&quot;+chooseFileA2.files[i].name+&quot;&lt;a onclick=&apos;deleteP2(this)&apos; &quot; + &quot; style=&apos;margin-left:10px;&apos; class=&apos;btn btn-success&apos;&gt;删除&lt;/a&gt;&quot; + &quot;&lt;/p&gt;&quot;; } } } //删除已选择的文件 function deleteP2(obj){ var fileTextA2 = document.getElementById(&quot;fileText2&quot;); var localN2 = $(obj).parent().prevAll().length; var chooseFileA2 = document.getElementById(&quot;chooseFile2&quot;); curFiles2.splice(localN2,1); obj.parentNode.remove(true); //上传文件的数组 console.log(curFiles2); } function dosend2() { $showmore2 = $(&apos;#showmore2&apos;); $(&quot;#loading2&quot;).css(&quot;display&quot;, &quot;block&quot;); $showmore2.bind(&apos;click&apos;, loadshots2); $showmore2.trigger(&apos;click&apos;); } function loadshots2() { var l = Ladda.create(this); l.start(); $(&apos;.ladda-label&apos;).text(&apos;加载中...&apos;); ajaxSubmit($(&quot;#uploadexcle2&quot;), function a(data) { $(&quot;#tdatemiddle&quot;).val(&quot;&quot;); $(&quot;#loading2&quot;).css(&quot;display&quot;, &quot;none&quot;); $(&quot;#uploadtype&quot;).val(1); $(&apos;#showmore2&apos;).unbind(&apos;click&apos;); l.stop(); tanchu(data.msg, data.code); }); $(&quot;#uploadtype&quot;).val(1); } function tanchu(msgs, code) { if (code == 2) { Ewin.confirm({message: msgs}).on(function (e) { if (!e) { return; } else { $(&quot;#uploadtype&quot;).val(2); dosend2(); } }); } else { Ewin.confirm({message: msgs}).on(function (e) { if (!e) { return; } else { return; } }); } } controller.java 中 /** * 上传 * @param file * @return * */ @RequestMapping(value=&quot;uploadOriginExcel2&quot;) @ResponseBody public String uploaddetail2(@RequestParam(value=&quot;upfile2&quot;,required = false)MultipartFile file){ Message msg = new Message(); String url=&quot;&quot;; if(file!=null){ String prefix = file.getOriginalFilename().substring(file.getOriginalFilename().indexOf(&quot;.&quot;)+1); if(file.getOriginalFilename().lastIndexOf(&quot;.&quot;)&gt;=0&amp;&amp;(prefix.equals(&quot;xls&quot;)||prefix.equals(&quot;xlsx&quot;))){ url = FileUtil.saveExcel(file); List&lt;String[]&gt; valuelist = new ArrayList&lt;String[]&gt;(); System.out.println(url); File fileone = new File(url); ExcelImpUtil eiu = new ExcelImpUtil(); try{ valuelist = eiu.getDataFromExcel(new FileInputStream(fileone),file.getOriginalFilename(),0,1,0); User user = getLoginUser(); String returnMsg=&quot;&quot;; String[] re = internetBarProtectService.insertallInternetUser(valuelist,user.getId()); if(re[0].equals(&quot;1&quot;)){ if(re[1].length()&gt;1){ String[] single = re[1].split(&quot;,&quot;); for(String b:single){ returnMsg = b + &quot;&lt;br&gt;&quot; + returnMsg; } } try{ msg.setCode(1); if(returnMsg.length()&gt;1){ msg.setMsg(returnMsg+&quot;没有找到地址&quot;); }else{ msg.setMsg(&quot;导入成功&quot;); } }catch(Exception ex){ msg.setCode(0); msg.setMsg(&quot;服务器错误&quot;); ex.printStackTrace(); } }else if(re[0].equals(&quot;2&quot;)){ msg.setCode(0); msg.setMsg(re[2]); }else if(!re[0].equals(&quot;1&quot;)){ msg.setCode(0); msg.setMsg(&quot;服务器错误&quot;); } }catch (Exception e){ e.printStackTrace(); }finally { internetBarProtectService.deleteuserSamebefore(); FileUtil.deleteFile(url); } }else{ msg.setCode(0); msg.setMsg(&quot;文件格式错误&quot;); } }else{ msg.setCode(0); msg.setMsg(&quot;请选择文件&quot;); } return JSON.toJSONString(msg); } service.java 中 public final static String[] InternetBarUserExcelModel={&quot;县市&quot;,&quot;网吧/专线&quot;,&quot;用户名&quot;,&quot;联系人&quot;,&quot;联系方式&quot;}; public int deleteuserSamebefore(){ //上传中出现重复的，重复的替换原来的 DataSourceContextHolder. setDbType(DataSourceType.CLOUDDATABASE); return internetBarProtectMapper.deleteuserSamebefore(); } public String[] insertallInternetUser(List&lt;String[]&gt; valuelist,Long userid)throws Exception{ String[] a = new String[3]; a[1] = &quot;&quot;; String[] firstline = valuelist.get(0); valuelist.remove(0); //去除第一行的各个列名 Map&lt;String,Object&gt; firstResult = ExcelModelFactory.CompareFirstLine(firstline,InternetBarUserExcelModel); if(firstResult.get(&quot;flag&quot;)!=null &amp;&amp; (Integer)firstResult.get(&quot;flag&quot;)==0){ List&lt;Integer&gt; position = (List&lt;Integer&gt;) firstResult.get(&quot;position&quot;); for(String[] listone : valuelist){ InternetBarUser i1 = new InternetBarUser(); i1.setId(UuidUtil.get32UUID()); i1.setCityarea(listone[position.get(0)].substring(0,listone[position.get(0)].trim().length())); //第一个0 获取放在第一列的信息 、 第二个0 从第一个字符开始获取该格 、 i1.setInternetBar(listone[position.get(1)].substring(0,listone[position.get(1)].trim().length())); i1.setUsername(listone[position.get(2)].substring(0,listone[position.get(2)].trim().length())); i1.setContacts(listone[position.get(3)].substring(0,listone[position.get(3)].trim().length())); i1.setContactInformation(listone[position.get(4)].substring(0,listone[position.get(4)].trim().length())); i1.setCreateTime(new Date()); i1.setCreateid(userid); a[2] = &quot;&quot;; a[0] = String.valueOf(internetBarUserInsert(i1)); } deleteuserSamebefore(); }else{ a[0] = &quot;2&quot;; a[2] = &quot;excel缺少（&quot;+String.valueOf(firstResult.get(&quot;nohere&quot;))+&quot;）这些列&quot;; } return a; } mapper.java 中 public int deleteuserSamebefore(); public int internetBarUserInsert(InternetBarUser internetBarUser); xml中 &lt;delete id=&quot;deleteuserSamebefore&quot;&gt; &lt;![CDATA[ DELETE MONITOR_INTERNETBARUSER t where t.id in ( SELECT A.id FROM (SELECT ROW_NUMBER() OVER(PARTITION BY us.cityarea,us.internetBar,us.username,us.contacts,us.contactInformation ORDER BY us.createTime desc) R,us.id FROM MONITOR_INTERNETBARUSER us) A where a.r&gt;1) ]]&gt; &lt;/delete&gt; &lt;insert id=&quot;internetBarUserInsert&quot; parameterType=&quot;InternetBarUser&quot;&gt; INSERT INTO MONITOR_INTERNETBARUSER ( id,cityarea,internetBar,username,contacts,contactInformation,createid,createTime ) VALUES ( #{id,jdbcType=VARCHAR},#{cityarea,jdbcType=VARCHAR},#{internetBar,jdbcType=VARCHAR},#{username,jdbcType=VARCHAR},#{contacts,jdbcType=VARCHAR}, #{contactInformation,jdbcType=VARCHAR}, #{createid},#{createTime} ) &lt;/insert&gt; #关于controller service 中的 插入 在这里不作详细代码展示 sql设计表： sql表： 待导入的excel表: 页面选择文件： 页面导入成功： sql表更新：","tags":[{"name":"ssm","slug":"ssm","permalink":"//tusick.me/tags/ssm/"}]},{"title":"ssm中的详情弹出","date":"2017-06-22T09:11:12.000Z","path":"2017/06/22/2017_6_22/","text":"表中有时候显示的一块内容过长不能全部显示出来，在这里可以通过另显示一个模态框，点击这段文字可以在弹出的模态框中显示全文 关键代码jsp的代码新建立一个模态框allInfoModal： &lt;!-- 缩略-详细信息 --&gt; &lt;div class=&quot;modal fade bs-example-modal-lg&quot; id=&quot;allInfoModal&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;myModalLabel&quot; aria-hidden=&quot;true&quot; style=&quot;z-index: 10000&quot;&gt; &lt;div class=&quot;modal-dialog modal-lg&quot;&gt; &lt;div class=&quot;modal-content&quot;&gt; &lt;div class=&quot;modal-header&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/button&gt; &lt;h4 class=&quot;modal-title&quot;&gt;详情&lt;/h4&gt; &lt;/div&gt; &lt;div class=&quot;modal-body&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;form-group col-md-12 col-xs-12&quot;&gt; &lt;textarea class=&quot;form-control&quot; id=&quot;info&quot; rows=&quot;8&quot;&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;modal-footer&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;关闭&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 在js中 对remark备注这个字段进行判定如果不为空并且长度大于10，则将第10个字符的后面全部替换为 ‘…’并且加上一个超链接 //在table定义中 if (res.rows[i].remark != null &amp;&amp; res.rows[i].remark.length &gt; 10) { res.rows[i].remark = &quot;&lt;a href=&apos;#&apos; onclick=&apos;showAllInfo(\\&quot;&quot; + res.rows[i].remark.replace(/[\\r\\n]/g, &quot;&quot;) + &quot;\\&quot;)&apos;&gt;&quot; + res.rows[i].remark.substring(0, 10) + &quot;...&lt;/a&gt;&quot;; } //详情显示 function showAllInfo(info){ $(&quot;#info&quot;).val(info); $(&quot;#allInfoModal&quot;).modal(&apos;show&apos;); } 看看效果： 在修改里面对备注进行修改 界面上点击备注第三条 弹出来的详细信息 完成！呃好像还有些bug，在修改页面里面写的多段在这里全部挤到一起了。 关键代码new对js中进行小修改 //在table定义中 if (res.rows[i].remark != null &amp;&amp; res.rows[i].remark.length &gt; 10) { res.rows[i].remark = &quot;&lt;a href=&apos;#&apos; onclick=&apos;showAllInfo(\\&quot;&quot; + rep(res.rows[i].remark) + &quot;\\&quot;)&apos;&gt;&quot; + res.rows[i].remark.substring(0, 12) + &quot;...&lt;/a&gt;&quot;; } //详情显示 function showAllInfo(info){ $(&quot;#info&quot;).val(repp(info)); $(&quot;#allInfoModal&quot;).modal(&apos;show&apos;); } //关于详情显示里面换行 function rep(string){ var str=string.replaceAll(&quot;\\n&quot;, &quot;&amp;&amp;br&amp;&amp;&quot;); return str; } function repp(string){ var str=string.replaceAll(&quot;&amp;&amp;br&amp;&amp;&quot;, &quot;\\n&quot;); return str; } String.prototype.replaceAll = function(s1,s2){ return this.replace(new RegExp(s1,&quot;gm&quot;),s2); } 再看看效果： 在修改里面对备注进行修改 界面上点击备注第三条 弹出来的详细信息 这样就小功告成了","tags":[{"name":"ssm","slug":"ssm","permalink":"//tusick.me/tags/ssm/"}]},{"title":"ssm中的模板文件下载","date":"2017-06-21T09:11:12.000Z","path":"2017/06/21/2017_6_21/","text":"今日在写一个关于范例模板下载的小小小功能，直接把demo文件放在包里面的一个文件夹中，用户点击直接下载这个模板进行后续操作。 关键代码jsp中，直接放在一个&lt;a&gt;标签中， &lt;a href=&quot;${base}/vpnManage/templetdownload &quot; class=&quot;btn btn-success&quot; style=&quot;float:left;margin-left: 5px;&quot;&gt;模板下载&lt;/a&gt; Filestemplet_down 文件下载方法 放在AttachmentController类中 public static void Filestemplet_down(HttpServletRequest request,HttpServletResponse response,String filePath){ String realPath = request.getSession().getServletContext().getRealPath(filePath); File file = new File(realPath); String filenames=file.getName(); InputStream inputStream; try{ inputStream = new BufferedInputStream(new FileInputStream(file)); byte[] buffer = new byte[inputStream.available()]; inputStream.read(buffer); inputStream.close(); response.reset(); response.addHeader(&quot;Content-Disposition&quot;,&quot;attachment;filename=&quot; + new String(filenames.replaceAll(&quot; &quot;,&quot;&quot;).getBytes(&quot;utf-8&quot;),&quot;iso8859-1&quot;)); response.addHeader(&quot;Content-Length&quot;,&quot;&quot;+file.length()); OutputStream os = new BufferedOutputStream(response.getOutputStream()); response.setContentType(&quot;application/octet-stream&quot;); os.write(buffer); os.flush(); os.close(); }catch(Exception e){ e.printStackTrace(); } } 在自己的VpnManageController中调用这个方法并设置路径在WebRoot/resources/templet下 //模板下载 @RequestMapping(value=&quot;templetdownload&quot;) public void templetdownload(HttpServletRequest request,HttpServletResponse response){ AttachmentController.Filestemplet_down(request,response,&quot;/resources/templet/demo.xls&quot;); } 实际页面点击模板下载 出来啦","tags":[{"name":"ssm","slug":"ssm","permalink":"//tusick.me/tags/ssm/"}]},{"title":"mybatis的分页查询","date":"2017-05-26T08:26:44.000Z","path":"2017/05/26/2017_5_26/","text":"aaaaaaaaaaaa测试","tags":[{"name":"杂记","slug":"杂记","permalink":"//tusick.me/tags/杂记/"}]},{"title":"CSS预处理器-Less的小白入门1","date":"2017-05-23T02:07:22.000Z","path":"2017/05/23/2017-5-23/","text":"最近了解到CSS预处理器的相关知识，觉得在一定程度上弥补了css某些方面的不足之处而对Less具有一定好感，遂来学习学习 什么是CSS预处理器CSS本身不是一种编程语言，可以用它开发网页样式，但是没法用它编程。CSS只是一行行单纯的属性描述，且代码难易组织和维护。如果在CSS中加入一些编程元素，让CSS能像其他程序语言一样可以做一些预定的处理，这样就有了CSS预处理器。CSS 预处理器用一种专门的编程语言，进行 Web 页面样式设计，然后再编译成正常的 CSS 文件，以供项目使用。CSS预处理器为CSS增加一些编程的特性，无需考虑浏览器的兼容性问题”，例如你可以在 CSS 中使用变量、简单的逻辑程序、函数（如右侧代码编辑器中就使用了变量$color）等等在编程语言中的一些基本特性，可以让你的 CSS 更加简洁、适应性更强、可读性更佳，更易于代码的维护等诸多好处。目前流行的三大CSS预处理器，Sass Less Stylus。 为什么要使用CSS预处理器1.CSS语法不支持递归定义的表达式，所以你没有办法用一个语句定义一个启发式的规则。如： .fs1{font-size:10px} .fs2{font-size:11px} /** .fs3 ... .fs9 **/ .fs20{font-size:29px} 如果数量更多到100+，修改费事费力，而通过CSS预处理器，极大提高便利性 @maxnumber:20; .makeSizeRules(@number) when(@number&lt;=@maxnumber){ .fs@{number}{ font-size:9+@number px; } .makeSizeRules(@number+1); } .makeSizeRules(1); 2.CSS的mixin式复用性支持不够。使用纯CSS，我们可以抽象出一些常用的布局CSS属性组合，通过CSS的类组合来达成常见的mixin式复用。3.预编译可缓解多浏览器兼容造成的冗余。通过CSS预处理器 当然，预编译不是万能的，在某些方面会变得额外麻烦。比如：CSS的好处在于简便、随时随地被使用和调试，而预编译CSS步骤的加入，让我们开发工作流中多了一个环节，调试也变得更麻烦了。更大的问题在于，预编译很容易造成后代选择器的滥用。 预编译语言模糊了样式覆写的问题，而导致要解决样式相互覆写的问题时，问题已经变得规模庞大而难以解决。 .first{ font-size:10px; a{ font-size:11px; } .b{ font-size:12px; } } .second{ font-size:13px; .b{ font-size:14px; } } 如果在这样一个文档结构.first.second &gt; .head &gt; a,需要使a的font-size设置为17px，除样式相互覆写或者额外再加一行外，并没有特别好的办法。 Less GO主要语法特性： 混入（Mixins）：其主要意思是将一个定义好的class A引入到另一个class B中，从而简单实现class B继承了class A的所有属性;参数混合（Parametric）：像函数一样在classA中定义一个参数的默认值，还可以是@arguments，然后将定义好的class A引入class B中；嵌套规则（Nested Rules）：在一个选择器中嵌套另一个选择器来实现继承。从而减少了代码量，并且增加了代码的可读性；运算（Operations）：在CSS中使用加、减、乘、除进行数学运算；颜色功能（Color function）：颜色的函数运算，可以编辑你的颜色；命名空间（Namespaces）：将一些变量或者混合模块打包封装，更好的组织CSS和属性集的重复使用；作用域（Scope）：局部修改样式；JavaScript表达式(Javascript evaluation)：在CSS样式中使用Javascript表达式赋值。 扩展名默认Less使用.less扩展名变量 Less 的变量名使用 @ 符号开始,然后变量名和值使用冒号隔开，跟 CSS 的属性一致 @maxnumber:20; 嵌套需要在CSS中相同的 parent 引用多个元素 section { margin: 10px; nav { height: 25px; a { color: #0982C1; &amp;amp;:hover { text-decoration: underline; } } } } 混入某段 CSS 经常需要在多个元素中使用时，你可以为这些共用的 CSS 定义一个 Mixin，然后你只需要在需要引用这些 CSS 地方调用该 Mixin 即可 .error(@borderWidth: 2px) { border: @borderWidth solid #F00; color: #F00; } .generic-error { padding: 20px; margin: 4px; .error(); /* Applies styles from mixin error */ } .login-error { left: 12px; position: absolute; top: 20px; .error(5px); /* Applies styles from mixin error with argument @borderWidth equal to 5px */ } 继承需要为多个元素定义相同样式时 .block { margin: 10px 5px; padding: 2px; } p { .block; border: 1px solid #EEE; } ul, ol { .block; color: #333; text-transform: uppercase; } 所生成的CSS为 .block { margin: 10px 5px; padding: 2px; } p { margin: 10px 5px; padding: 2px; border: 1px solid #EEE; } ul, ol { margin: 10px 5px; padding: 2px; color: #333; text-transform: uppercase; } 导入导入颜色：CSS 预处理器一般都会内置一些颜色处理函数用来对颜色值进行处理， lighten(@color, 10%); /* returns a color 10% lighter than @color */ darken(@color, 10%); /* returns a color 10% darker than @color */ saturate(@color, 10%); /* returns a color 10% more saturated than @color */ desaturate(@color, 10%); /* returns a color 10% less saturated than @color */ spin(@color, 10); /* returns a color with a 10 degree larger in hue than @color */ spin(@color, -10); /* returns a color with a 10 degree smaller hue than @color */ mix(@color1, @color2); /* return a mix of @color1 and @color2 */ | 【to be continued】 PS：好吧，其实作为小白的我，以上很大部分都是借鉴其他各种大牛的日志摘要归纳来的,权当学习学习：）","tags":[{"name":"前端","slug":"前端","permalink":"//tusick.me/tags/前端/"}]},{"title":"myFirstblog","date":"2017-05-20T09:42:43.000Z","path":"2017/05/20/my-first-blog/","text":"#前言 这是生菜的第一篇博文，这里交给杂记 什么都不会的生菜在于某一天看到了各种精彩的个人博客，瞬间被吸引住，然而因为某些原因（主要还是懒）而迟迟未行动终于下定决心后开始捣鼓git指令、github、hexo、购域名等，最终，在风和日丽的某节日里 借助某框架完成了初步的博客搭建，也便是现在所见到的决定作为个人技术博客la努力学习，壮大myblog 共勉 以后有能力了，再自己原生写个框架搭建成自己喜爱的样子做一个个人生活博客记录自己所想会有那么一天的 最后，献上可爱的Sans以及Papyrus","tags":[{"name":"杂记","slug":"杂记","permalink":"//tusick.me/tags/杂记/"}]}]